namespace Tyes.Infrastructure.Sdl.Interop
{
  using System.Runtime.InteropServices;

  /// <summary>
  /// Represents the result of a SDL call returning void.
  /// Errors must be explicitly checked for.
  /// </summary>
  /// <remarks>
  /// This struct is used to abuse the underlying calling convention and provide better exception safety for void calls.
  /// Instead of defining SDL void methods as such, they are defined returning <see cref="SdlVoidResult" /> instead.
  /// This should not be a problem since registers are used when returning values, but as such the value of the struct
  /// points to uninitialized memory. This is fine because we only want to enforce warnings generated by the
  /// <see cref="JetBrains.Annotations.MustUseReturnValueAttribute" /> in combination with this struct. The user is
  /// reminded to call <see cref="Unwrap" />, ths checking if the SDL call failed with an error.
  /// </remarks>
  /// <example>
  ///   <code>
  /// [MustUseReturnValue]
  /// [DllImport(...)]
  /// public static extern SdlVoidResult SDL_SetWindowBordered(SdlWindow window, bool bordered);
  /// 
  /// ...
  /// 
  /// SDL_SetWindowBordered(); // Warning: result not used
  /// 
  /// SDL_SetWindowBordered().Unwrap(); // ok
  /// </code>
  /// </example>
  /// <seealso cref="SdlResult{TResult}" />
  [StructLayout (LayoutKind.Sequential)]
  public readonly ref struct SdlVoidResult
  {
    // Instances are only created by P/Invoke so we can ignore the warning
#pragma warning disable 649
    // Since this field is always uninitialized memory we do not need it
#pragma warning disable 169
    private readonly nint _result;
#pragma warning restore 169
#pragma warning restore 649

    /// <summary>
    /// Checks for a SDL last-error and throws a <see cref="SdlException" /> if one is available.
    /// </summary>
    /// <exception cref="SdlException">The SDL call failed.</exception>
    public void Unwrap()
    {
      var lastError = SdlMarshal.GetLastError();
      if (lastError != null)
      {
        SdlMarshal.ClearLastError();
        throw new SdlException (lastError);
      }
    }
  }
}
